객체지향프로그래밍(OOP:Object Oriented Programming)

1. 객체란?
- 객체 : 자신의 속성을 가지고 있고 다른 것과 식별 가능한 것
	  : 속성(필드, field) + 동작(메소드,method)
- (객체모델링)UML : 현실 세계의 객체를 소프트웨어 객체로 설계하는 것

2. 객체의 상호작용
- 객체들은 각각 독립적으로 존재하고, 다른 객체와 서로 상호작용하면서 동작한다.
- 객체들 사이의 상호작용 수단은 메소드이다.
- 객체가 다른 객체의기능을 이용하는 것이 바로 메소드 호출이다.

3. 메소드 호출
- 객체에 도트(.) 연산자를 붙이고 메소드 이름을 기술하면 된다.
- 도트는 객체의 필드와 메소드에 접근할 때 사용한다.

리턴값 = 전자계산기객체.메소드(매개값1,매개값2);
- 매개값은 메소드를 실행하기 위한 데이터이다.
- 리턴값은 메소드가 실행하고 나서 호출한 곳으로 돌려주는 값이다.

4. 객체 간의 관계
- 집합관계 : 각 객체들이 모여 하나의 완성품에 해당한다.
- 사용관계 : 객체 간의 상호작용을 말한다.
- 상속관계 : 상위(부모) 객체를 기반으로 하위(자식) 객체를 생성하는 관계를 말한다. 일반적으로 상위객체는 종류를 의미하고, 하위 객체는 구체적인 사물에 해당한다.
- OOP는 만둘고자 하는 완성품을 모델링하고, 집합 관계에 있는 객체와 상ㅇ 관계에 있는 객체를 하나씩 설게한 후 조립하는 방식으로 프로그램을 개발하는 기법이다.

5. 객체 지향 특징
- 캡슐화(Encapsulation) : 객체의 필드, 메소드를 하나로 묶고, 실제 구현 내용(접근방법만 노출)을 감추는 것을 말한다.
	- 외부 객체는 객체 내부의 구조를 알지 못하며 객체가 노출해서 제공하는 필드와 메소드만 이용할 수 있다.
	- 사용 이유 : 외부의 잘못된 사용으로 인해 객체가 손상되지 않도록 하는데 있다.
	- 자바는 캡슐화된 멤버를 노출시킬 것인지, 아닌지 결정하기 위해 접근제한자(Access Modifier)를 사용한다.
	- 접근 제한자는 객체의 필드와 메소드의 사용 범위를 제한함으로써 외부로부터 보호한다.
- 상속(Inheritance) : 상위 객체를 재사요해서 하위 객체를 쉽고 빨리 설계할 수 있도록 도와주고, 이미 잘 개발된 객체를 재사용해서 새로운 객체를 만들기 때문에 반복된 코드의 중복을 줄여준다.
	- 사용 이유 : 상위 객체의 수정으로 무든 하위 객체들의 수정 효과를 가져오므로 유지보수 시간을 최소화시켜준다.
- 다혀성(Polymorphism) : 같은 타입이지만 실행 결과가 다양한 객체를 이용할 수 있는 성질을 말한다.
	- 부모 클래스 또는 인터페이스의 타입 변환을 허용한다.
	- 부모 타입에는 모든 자식 객체가 대입될 수 있고, 인터페이스 타입에는 모든 구현 객체가 대입될 수 있다.
